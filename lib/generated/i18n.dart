import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Crash"
  String get titleCrash => "Crash";
  /// "Home"
  String get titleHome => "Home";
  /// "Repos"
  String get titleRepos => "Repos";
  /// "Events"
  String get titleEvents => "Events";
  /// "System"
  String get titleSystem => "System";
  /// "Bookmarks"
  String get titleBookmarks => "Bookmarks";
  /// "Collection"
  String get titleCollection => "Collection";
  /// "Setting"
  String get titleSetting => "Setting";
  /// "About"
  String get titleAbout => "About";
  /// "Share"
  String get titleShare => "Share";
  /// "Sign Out"
  String get titleSignOut => "Sign Out";
  /// "Language"
  String get titleLanguage => "Language";
  /// "Auto"
  String get languageAuto => "Auto";
  /// "Save"
  String get save => "Save";
  /// "More"
  String get more => "More";
  /// "Reco Repos"
  String get recRepos => "Reco Repos";
  /// "Reco WxArticle"
  String get recWxArticle => "Reco WxArticle";
  /// "Repos Tree"
  String get titleReposTree => "Repos Tree";
  /// "Wx Article"
  String get titleWxArticleTree => "Wx Article";
  /// "Theme"
  String get titleTheme => "Theme";
  /// "user name"
  String get user_name => "user name";
  /// "password"
  String get user_pwd => "password";
  /// "confirm password"
  String get user_re_pwd => "confirm password";
  /// "Login"
  String get user_login => "Login";
  /// "Register"
  String get user_register => "Register";
  /// "Forget the password?"
  String get user_forget_pwd => "Forget the password?";
  /// "New users? "
  String get user_new_user_hint => "New users? ";
  /// "Confirm"
  String get confirm => "Confirm";
  /// "Cancel"
  String get cancel => "Cancel";
  /// "Jump ${type}S"
  String jump_count(String type) => "Jump ${type}S";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_zh_CN extends I18n {
  const _I18n_zh_CN();

  /// "崩溃页面"
  @override
  String get titleCrash => "崩溃页面";
  /// "主页"
  @override
  String get titleHome => "主页";
  /// "项目"
  @override
  String get titleRepos => "项目";
  /// "动态"
  @override
  String get titleEvents => "动态";
  /// "体系"
  @override
  String get titleSystem => "体系";
  /// "书签"
  @override
  String get titleBookmarks => "书签";
  /// "收藏"
  @override
  String get titleCollection => "收藏";
  /// "设置"
  @override
  String get titleSetting => "设置";
  /// "关于"
  @override
  String get titleAbout => "关于";
  /// "分享"
  @override
  String get titleShare => "分享";
  /// "注销"
  @override
  String get titleSignOut => "注销";
  /// "多语言"
  @override
  String get titleLanguage => "多语言";
  /// "跟随系统"
  @override
  String get languageAuto => "跟随系统";
  /// "保存"
  @override
  String get save => "保存";
  /// "更多"
  @override
  String get more => "更多";
  /// "推荐项目"
  @override
  String get recRepos => "推荐项目";
  /// "推荐公众号"
  @override
  String get recWxArticle => "推荐公众号";
  /// "项目分类"
  @override
  String get titleReposTree => "项目分类";
  /// "公众号"
  @override
  String get titleWxArticleTree => "公众号";
  /// "主题"
  @override
  String get titleTheme => "主题";
  /// "用户名"
  @override
  String get user_name => "用户名";
  /// "密码"
  @override
  String get user_pwd => "密码";
  /// "确认密码"
  @override
  String get user_re_pwd => "确认密码";
  /// "登录"
  @override
  String get user_login => "登录";
  /// "注册"
  @override
  String get user_register => "注册";
  /// "忘记密码？"
  @override
  String get user_forget_pwd => "忘记密码？";
  /// "新用户？"
  @override
  String get user_new_user_hint => "新用户？";
  /// "确认"
  @override
  String get confirm => "确认";
  /// "取消"
  @override
  String get cancel => "取消";
  /// "跳过 ${type}S"
  @override
  String jump_count(String type) => "跳过 ${type}S";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("zh", "CN")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("zh_CN" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("zh" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_zh_CN());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}